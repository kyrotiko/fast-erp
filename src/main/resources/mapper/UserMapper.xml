<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须与接口的全类名一致 -->
<mapper namespace="com.yy.fasterp.mapper.UserMapper">

    <resultMap type="com.yy.fasterp.pojo.User" id="UserMap">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="mobile" property="mobile" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="salt" property="salt" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="created_time" property="createdTime" jdbcType="DATE"/>
        <result column="updated_time" property="updatedTime" jdbcType="DATE"/>
        <result column="deleted" property="deleted" jdbcType="INTEGER"/>
        <collection column="id" property="roles" javaType="list" select="selectAllRoles"></collection>
    </resultMap>

    <select id="selectAllRoles" parameterType="INTEGER" resultType="com.yy.fasterp.pojo.Role">
		select id,role,remark
		from role
		where id in ( select user_role.roleid from user_role where user_role.userid=#{id})
	</select>

    <sql id="base_column">
        nickname,username,password,salt,mobile,email,status,created_time,updated_time,deleted
    </sql>

    <!-- id必须和mapper接口对应的功能名称一致 ，此处只写save功能 -->
    <insert id="save" parameterType="com.yy.fasterp.pojo.User">
        insert into user(
        <include refid="base_column"/>
        )
        values(#{nickname},#{username},#{password},#{salt},#{mobile},#{email},#{status},now(),now(),0)
    </insert>
    <select id="findById" parameterType="Integer" resultMap="UserMap">
        select *
        from user where id = #{id} and deleted = 0
    </select>
    <select id="findByUserName" parameterType="String" resultMap="UserMap">
        select *
        from user where username = #{username} and deleted = 0
    </select>
    <delete id="delete" parameterType="com.yy.fasterp.pojo.User">
		delete from user where user.id = #{id}
	</delete>
    <update id="update" parameterType="com.yy.fasterp.pojo.User">
        update user
        <set>
            <if test='username != null and username!=""'>
                username=#{username}
            </if>
            <if test='nickname != null and nickname != ""'>
                ,nickname=#{nickname}
            </if>
            <if test='password != null and password !=""'>
                ,password= #{password}
            </if>
            <if test='salt != null and salt != ""'>
                ,salt= #{salt}
            </if>
            <if test='mobile != null and mobile != ""'>
                ,mobile= #{mobile}
            </if>
            <if test='email != null and email != ""'>
                ,email= #{email}
            </if>
            <if test='status != null'>
                ,status= #{status}
            </if>
            <if test='deleted != null'>
                ,deleted= #{deleted}
            </if>
            ,updated_time= now()
        </set>
        where id = #{id}
    </update>


    <select id="getUserListByLimit" resultMap="UserMap">
        select
        user.id,user.username,user.nickname,user.mobile,user.email,user.status,user.created_time,user.updated_time,user.deleted
        from
        user
        where id != 1
        <if test='username != null'>
            and userName like '%${username}%'
        </if>
        and deleted = 0
    </select>

    <delete id="deleteUserList" parameterType="java.util.List">
        delete from user
        where user.id in
        <foreach item="param" collection="list" open="(" close=")"
                 separator=",">
            #{param.id}
        </foreach>
    </delete>
    <delete id="deleteUserRoles" parameterType="java.util.List">
        delete from user_role
        where user_role.userid in
        <foreach item="param" collection="list" open="(" close=")"
                 separator=",">
            #{param}
        </foreach>
    </delete>

    <insert id="saveUserRole">
        insert into user_role(userid, roleid)
        values
        <foreach item="role" collection="roles" separator=",">
            (#{user.id},#{role.id})
        </foreach>
    </insert>


</mapper>